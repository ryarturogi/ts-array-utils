declare const sort: (array: any[], direction?: string, sortBy?: string) => any[];
declare const filter: (array: any[], predicate: (item: any) => boolean) => any[];
declare const transform: (array: any[], transformer?: (n: any) => any) => any[];
declare const includes: (arr: any[], element: any) => any | undefined;
declare const min: (array: any[], key?: string) => any | undefined;
declare const max: (array: any[], key?: string) => any | undefined;
declare const sum: (array: any[]) => number;
declare const average: (obj: any) => number;
declare const distinct: (array: any[]) => any[];
declare const shuffle: (array: any[]) => any[];
declare const flatten: (array: any[]) => any[];
declare const uniqueElements: (array: any[]) => any[];
declare const groupBy: (array: any[], callback: (element: any) => any) => object;
declare const partition: (array: any[], callback: (element: any) => boolean) => any[][];
declare const intersection: (array1: any[], array2: any[]) => any[];
declare const difference: (array1: any[], array2: any[]) => any[];
declare const removeDuplicates: (array: any[]) => void;
declare const chunk: (array: any[], size: number) => any[][];
declare const randomSample: (array: any[], size: number) => any[];
declare const mean: (array: number[]) => number;
declare const median: (array: number[]) => number;
declare const mode: (array: number[]) => number;
declare function variance(array: any[]): number;
declare const standardDeviation: (array: number[]) => number;
declare const countOccurrences: (array: any[], element: any) => number;
declare const zip: (...arrays: any[][]) => any[][];
declare const unzip: (array: any[][]) => any[][];
declare const rotate: (array: any[], positions: number) => any[];
declare const flip: (array: any[]) => any[];
declare const mirror: (array: any[]) => any[];
declare const isSorted: (data: any, compareFn: (a: any, b: any) => number, direction?: 'asc' | 'desc', findByKey?: string) => boolean;
declare const isEqual: (array1: any[], array2: any[]) => boolean;
declare const swap: (array: any[], index1: number, index2: number) => void;
declare const move: (array: any[], from: number, to: number) => void;
declare const fill: (array: any[], value: any) => void;
declare const reverseFill: (array: any[], value: any) => void;
declare const findFirst: (array: any[], callback: (element: any) => boolean) => any | undefined;
declare const findLast: (array: any[], callback: (element: any) => boolean) => any | undefined;
declare const remove: (data: any[], index: number | ((x: number) => boolean), count?: number) => any[];
declare const insert: (array: any[], index: number, ...elements: any[]) => void;
declare const merge: (array1: any[], array2: any[]) => any[];
declare const pad: (array: any[], padding: any, repeat: number) => any[];
declare const repeat: (array: any[], repeat: number) => any[];
declare const range: (array: number[]) => number[];
declare const countBy: (array: any[], callback: (element: any) => any) => object;
declare const deepSearch: (input: any, pattern: any, startIndex?: number) => number | undefined;
export { sort, filter, transform, includes, min, max, sum, average, distinct, shuffle, flatten, uniqueElements, groupBy, partition, intersection, difference, removeDuplicates, chunk, randomSample, mean, median, mode, variance, standardDeviation, countOccurrences, zip, unzip, rotate, flip, mirror, isSorted, isEqual, swap, move, fill, reverseFill, findFirst, findLast, remove, insert, merge, pad, repeat, range, countBy, deepSearch, };
